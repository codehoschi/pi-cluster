---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: openproject
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: vault-kv
  target:
    name: openproject-secret
    creationPolicy: Owner
    deletionPolicy: Delete
    template:
      engineVersion: v2
      data:
        # App
        OPENPROJECT_DB_USER_PASSWORD: "{{ .OPENPROJECT_DB_USER_PASSWORD }}"
        OPENPROJECT_DB_URL: |-
          postgres://{{ .OPENPROJECT_DB_USER }}:{{ .OPENPROJECT_DB_USER_PASSWORD }}@postgres-v16-rw.database.svc.cluster.local/openproject
        OPENPROJECT_SEED__ADMIN__USER__NAME: "{{ .OPENPROJECT_ADMIN_USER_NAME }}"
        OPENPROJECT_SEED__ADMIN__USER__PASSWORD: "{{ .OPENPROJECT_ADMIN_PASSWORD }}"
        #SAML SSO
        # Name of the provider, leave this at saml unless you use multiple providers
        OPENPROJECT_SAML_SAML_NAME: "saml"
        # The name that will be display in the login button
        OPENPROJECT_SAML_SAML_DISPLAY__NAME: "SSO"
        # The callback within OpenProject that your idP should redirect to
        OPENPROJECT_SAML_SAML_ASSERTION__CONSUMER__SERVICE__URL: "https://projects.k8s.lmwpva.net/auth/saml/callback"
        # The SAML issuer string that OpenProject will call your idP with
        OPENPROJECT_SAML_SAML_ISSUER: "https://projects.k8s.lmwpva.net"
        # IF your SSL certificate on your SSO is not trusted on this machine, you need to add it here in ONE line
        ### one liner to generate certificate in ONE line
        ### awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' <yourcert.pem>
        #idp_cert: "-----BEGIN CERTIFICATE-----\n ..... SSL CERTIFICATE HERE ...-----END CERTIFICATE-----\n"
        # Otherwise, the certificate fingerprint must be added
        # Either `OPENPROJECT_SAML_SAML_IDP__CERT` or `OPENPROJECT_SAML_SAML_IDP__CERT__FINGERPRINT` must be present!
        OPENPROJECT_SAML_SAML_IDP__CERT: "-----BEGIN CERTIFICATE-----\nMIIFUzCCAzugAwIBAgIQdTJ7q2VWTq6GimAosoS0izANBgkqhkiG9w0BAQsFADAe\nMRwwGgYDVQQDDBNhdXRoZW50aWsgMjAyMy4xMC4yMB4XDTIzMTEwNTE1MTE1OVoX\nDTI0MTEwNTE1MTE1OVowVjEqMCgGA1UEAwwhYXV0aGVudGlrIFNlbGYtc2lnbmVk\nIENlcnRpZmljYXRlMRIwEAYDVQQKDAlhdXRoZW50aWsxFDASBgNVBAsMC1NlbGYt\nc2lnbmVkMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr7BSxcgAZm5O\nLsRW7eXeEOZytXGAljFEtqyYOnSnCsdv+nT6aQkXj6rCG9lUOkTiIuWSnKRb9NWi\nZ875OPpifQ4fmbMPJyDVof/LoFVdJzS3oB8cBYb3NGqVGEt4xD35AgI2RcnpN5kO\noE5o5kidVb19mmX8bZ/EZCJuo+McIBxsEdHAMAdxX2WFwixw2kFJ8m73pranJfu7\nrduJlBeOakLYmGYkyoxm2CVvma1asCioL6Ec+FMOjN88xfLXnrGB01VPIzI49iey\nGfKDy47R1JdpkiaU1KdeOP5oFv1CoavRFSjJOeK6lVpVw+nVhEShTfmClK+jdjkT\n9HyLbe/q3G149Xb9nWxA3keH2xchlvkNkLuj7ll/MhQHR5JZ0WMffSqD9DLj0LkB\nR60yNeBl8beZCGK0jpxqykfQt9wiXZrmQTqF8lTHdPdKGtl5Z49cFIBGiA9LI2qB\nd7b4jScSq+gZVzHBYWdub/4x8vB7LL6c8rYbMslDSUV4/3c1xUgIhv563CLfynJm\nUlo0BnSRDT7L+1cCiBfHvwChCK01z1g+DpzYmigcCcRiU5/OFX1wC36lbEQdiQKf\nw6RMPIaSoc9yTpfNifB5MVLuw3dUaZNYsi75kg+bpoHCNJmq6RFZzkoia5fE2cg2\nA793zscX5aeCCFC9izVSeHPGn9XXmvUCAwEAAaNVMFMwUQYDVR0RAQH/BEcwRYJD\ndTlRa0dJS1ZnMUJvaW1aR21UTHkweHlMUVdRalhkZ3FpM0UyY0hibi5zZWxmLXNp\nZ25lZC5nb2F1dGhlbnRpay5pbzANBgkqhkiG9w0BAQsFAAOCAgEAHyeSjJCRv+GD\n8lUME7+CJoWN8UQOZ2saaOzz0bwS9/ZLO9cNOD5SaE8bBTOlg9p0jnRl62anYqYv\n2GhFP39vVeZlMWax1kKsDxTTsNBCcjeajFTpa1Fd7n4NhVkEgY1d04ARzRnzKZMG\n1xC82Xgp/FwjtayK4SwgyTI6I/aJG/g4IokadX0Hz6dDW2wrnP17c/g0OBuO5FHg\ny7G5zk+mdVSY7Fm1pX4She+Y1k/KEjFt8HCs4OBg9B2C4WXCijHx322AjGvc/ZLw\nW8Icsq5qUvTo3WKErNVLET7V52iih4uyyPW4o+tFQtLJp45OyDRiXYzPKJVOpcXP\nlTTQt76Go9E3MS95r31izmmW8Fcv8PduJ9mk9SDnQWJgtm91s0psvrP5zYJyC/8M\ndjB/Bu3cYr9IfO7Nq5u87Wl8E0OQQbA962PeLNesf+8UUp/KImK9x9pIILDZ+5li\nfrnXZNr3DYbfNerHS7hQZ0sXAgWdin6MWS+XYHDNWWDNHsQEHntG4XKxAm60B+fX\np8DWFKtGeawarJL41yMO3ov66Uz58QhECK5GaP/gnl68jqD3EcWdr+NFzDccyaFf\nhU6saDgd35qQpu8EWtPRQmzby2JF306PhnCMiLHX/ZUeu4c484IIQW1WkU1sDVRc\nbRepJgVyHAAjCRind9i8Mzm4eHcuAmY=\n-----END CERTIFICATE-----\n"
        # If you  this environment variable through a shell, you will need to run it through C style quoting to preserve the newline
        # Otherwise you will get an internal error with this log line "PEM_read_bio_X509: bad base64 decode"
        # OPENPROJECT_SAML_SAML_IDP__CERT=$'-----BEGIN CERTIFICATE-----<cert one liner>-----END CERTIFICATE-----'
        # OPENPROJECT_SAML_SAML_IDP__CERT__FINGERPRINT: "d3:ba:ad:98:d7:06:b6:b0:ba:e4:4c:16:72:e5:0a:e0:5b:23:4f:95"
        # Replace with your single sign on URL, the exact value depends on your idP implementation
        OPENPROJECT_SAML_SAML_IDP__SSO__TARGET__URL: "https://auth.k8s.lmwpva.net/application/saml/openproject/sso/binding/redirect/"
        # (Optional) Replace with your redirect flow single sign out URL that we should redirect to
        OPENPROJECT_SAML_SAML_IDP__SLO__TARGET__URL: "https://auth.k8s.lmwpva.net/application/saml/openproject/slo/binding/redirect/"
        # Which SAMLAttribute we should look for for the corresponding attributes of OpenProject
        # can be a string or URI/URN depending on our idP format
        OPENPROJECT_SAML_SAML_ATTRIBUTE__STATEMENTS_EMAIL: "[http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress]"
        OPENPROJECT_SAML_SAML_ATTRIBUTE__STATEMENTS_LOGIN: "[http://schemas.goauthentik.io/2021/02/saml/username]"
        OPENPROJECT_SAML_SAML_ATTRIBUTE__STATEMENTS_FIRST__NAME: "[firstName]"
        OPENPROJECT_SAML_SAML_ATTRIBUTE__STATEMENTS_LAST__NAME: "[lastName]"
        # You can also specify multiple attributes, the first found value will be used. Example:
        # OPENPROJECT_SAML_SAML_ATTRIBUTE__STATEMENTS_LOGIN="['mail', 'samAccountName', 'uid']"
        # Postgres Init
        INIT_POSTGRES_DBNAME: openproject
        INIT_POSTGRES_HOST: postgres-v16-rw.database.svc.cluster.local
        INIT_POSTGRES_USER: "{{ .OPENPROJECT_DB_USER }}"
        INIT_POSTGRES_PASS: "{{ .OPENPROJECT_DB_USER_PASSWORD }}"
        INIT_POSTGRES_SUPER_PASS: "{{ .POSTGRES_SUPER_PASS }}"
  dataFrom:
    - extract:
        key: openproject
    - extract:
        key: postgres
